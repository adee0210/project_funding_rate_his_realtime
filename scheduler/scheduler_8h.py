#!/usr/bin/env python3
"""
Scheduler script to run funding rate data extraction every 8 hours (0h, 8h, 16h)
"""

import sys
import os
import time
import schedule
from datetime import datetime

# Add src to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

from src.extract.extract_history import ExtractFundingRateHistory
from src.config.config_logging import ConfigLogging
from src.utils.util_tele_bot_check import UtilTeleBotCheck


class FundingRateScheduler:
    """Scheduler cho vi·ªác tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª∑ l·ªá funding m·ªói 8 gi·ªù"""

    def __init__(self):
        self.logger = ConfigLogging.config_logging("FundingRateScheduler")
        self.extract = ExtractFundingRateHistory()
        self.tele_bot = UtilTeleBotCheck()
        self.is_running = False

    def run_scheduled_extraction(self):
        """Ch·∫°y tr√≠ch xu·∫•t theo l·ªãch v√† l∆∞u v√†o history collection

        Ch·∫°y v√†o 0h, 8h, 16h m·ªói ng√†y ƒë·ªÉ:
        - Tr√≠ch xu·∫•t d·ªØ li·ªáu funding rate trong 8h qua
        - L∆∞u v√†o history collection thay v√¨ realtime
        - ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ l√¢u d√†i
        """
        try:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.logger.info(f"Starting scheduled extraction at: {current_time}")

            # Get top 100 symbols ƒë·ªÉ tr√°nh qu√° t·∫£i
            symbols = self.extract.get_top_symbols(limit=100)

            if not symbols:
                self.logger.error("No symbols to process")
                self.tele_bot.send_message(
                    "Scheduled extraction failed - no symbols found"
                )
                return

            self.logger.info(f"Processing {len(symbols)} symbols for history storage")

            # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
            self.tele_bot.send_message(
                f"üìä Scheduled history extraction started at {current_time}\n"
                f"‚è∞ Time: {datetime.now().strftime('%H:%M')} (8-hour interval)\n"
                f"üéØ Processing {len(symbols)} symbols to history collection"
            )

            # Tr√≠ch xu·∫•t d·ªØ li·ªáu 8h g·∫ßn nh·∫•t ƒë·ªÉ l∆∞u v√†o history
            # Logic auto-detect s·∫Ω x·ª≠ l√Ω vi·ªác l·∫•y data t·ª´ l·∫ßn cu·ªëi c√πng
            success = self.extract.extract_all_history(symbols, days_back=1)

            if success:
                self.logger.info("Scheduled extraction completed successfully")
                self.tele_bot.send_message(
                    f"‚úÖ History extraction completed at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üìà {len(symbols)} symbols processed to history collections"
                )
            else:
                self.logger.error("Scheduled extraction failed")
                self.tele_bot.send_message("‚ùå Scheduled history extraction failed")

        except Exception as e:
            self.logger.error(f"Error in scheduled extraction: {e}")
            self.tele_bot.send_message(f"‚ùå Scheduled extraction error: {str(e)}")

    def start_scheduler(self):
        """Kh·ªüi ƒë·ªông scheduler ƒë·ªÉ ch·∫°y tr√≠ch xu·∫•t m·ªói 8 gi·ªù"""
        try:
            self.logger.info("Starting funding rate scheduler")

            # Schedule extraction at 00:00, 08:00, and 16:00 daily
            schedule.every().day.at("00:00").do(self.run_scheduled_extraction)
            schedule.every().day.at("08:00").do(self.run_scheduled_extraction)
            schedule.every().day.at("16:00").do(self.run_scheduled_extraction)

            # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
            self.tele_bot.send_message(
                "üöÄ Funding Rate History Scheduler Started\n"
                "‚è∞ Schedule: Every 8 hours (00:00, 08:00, 16:00)\n"
                "üéØ Processing top 100 symbols\n"
                "üíæ Data saved to history collections (permanent storage)"
            )

            self.logger.info(
                "Scheduler configured for 00:00, 08:00, and 16:00 daily - saving to history"
            )
            self.is_running = True

            # Ch·∫°y ngay l·∫≠p t·ª©c m·ªôt l·∫ßn ƒë·ªÉ test
            self.logger.info("Running initial history extraction...")
            self.run_scheduled_extraction()

            # Keep scheduler running
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # Check every minute

        except KeyboardInterrupt:
            self.logger.info("Scheduler stopped by user")
            self.tele_bot.send_message("Funding Rate Scheduler stopped")
        except Exception as e:
            self.logger.error(f"Error in scheduler: {e}")
            self.tele_bot.send_message(f"Scheduler error: {str(e)}")
        finally:
            self.is_running = False


def main():
    """Main entry point for scheduler"""
    scheduler = FundingRateScheduler()

    try:
        scheduler.start_scheduler()
    except KeyboardInterrupt:
        print("\nScheduler stopped by user")
        scheduler.stop_scheduler()
    except Exception as e:
        print(f"Error: {e}")
        scheduler.stop_scheduler()
        sys.exit(1)


if __name__ == "__main__":
    main()
