#!/usr/bin/env python3
"""
Test script cho h·ªá th·ªëng Funding Rate Manager ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi scheduler n√¢ng cao
Ki·ªÉm tra to√†n b·ªô h·ªá th·ªëng funding rate manager
"""

import sys
import os
import time
from datetime import datetime, timezone

# Add the project root to Python path
sys.path.append('/home/duc_le/project_funding_rate_his_realtime')

from src.funding_rate_manager import FundingRateManager
from scheduler.advanced_funding_scheduler import AdvancedFundingRateScheduler


def test_advanced_scheduler_standalone():
    """Ki·ªÉm tra scheduler n√¢ng cao ƒë·ªôc l·∫≠p"""
    print("Testing Advanced Scheduler (Standalone)...")
    print("=" * 60)
    
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'XRPUSDT']
    
    scheduler = AdvancedFundingRateScheduler(test_symbols)
    
    print(f"Testing with {len(test_symbols)} symbols...")
    
    # Ki·ªÉm tra ph√¢n lo·∫°i
    scheduler._categorize_symbols()
    
    print(f"Categorization Results:")
    print(f"  1h monitoring: {len(scheduler.symbols_1h)} symbols")
    print(f"  4h funding: {len(scheduler.symbols_4h)} symbols")
    print(f"  8h funding: {len(scheduler.symbols_8h)} symbols")
    
    # Ki·ªÉm tra thi·∫øt l·∫≠p l·ªãch
    try:
        scheduler._setup_funding_schedules()
        scheduler._setup_verification_schedules()
        print("‚úÖ Schedule setup successful")
    except Exception as e:
        print(f"‚ùå Schedule setup failed: {e}")
        return False
    
    # L·∫•y tr·∫°ng th√°i
    status = scheduler.get_status()
    print(f"\\nScheduler Status:")
    for key, value in status.items():
        print(f"  {key}: {value}")
    
    return True


def test_funding_rate_manager():
    """Ki·ªÉm tra Funding Rate Manager ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t"""
    print("\\nKi·ªÉm tra Funding Rate Manager ƒë√£ c·∫≠p nh·∫≠t...")
    print("=" * 60)
    
    try:
    # T·∫°o instance manager
        manager = FundingRateManager()
        
        print("‚úÖ Manager created successfully")
        
    # Ki·ªÉm tra kh·ªüi t·∫°o (kh√¥ng start to√†n b·ªô h·ªá th·ªëng)
        if manager.initialize():
            print("‚úÖ Manager initialized successfully")
            print(f"  Loaded {len(manager.symbols)} symbols")
        else:
            print("‚ùå Manager initialization failed")
            return False
        
    # Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi start
        status = manager.get_status()
        print(f"\\nManager Status (before start):")
        print(f"  is_running: {status.get('is_running')}")
        print(f"  symbols_count: {status.get('symbols_count')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Manager test failed: {e}")
        return False


def test_system_integration():
    """Ki·ªÉm tra t√≠ch h·ª£p h·ªá th·ªëng m√† kh√¥ng c·∫ßn start ƒë·∫ßy ƒë·ªß"""
    print("\\nKi·ªÉm tra t√≠ch h·ª£p h·ªá th·ªëng...")
    print("=" * 60)
    
    try:
    # Ki·ªÉm tra t·∫°o scheduler n√¢ng cao v·ªõi c√°c symbol t·ª´ manager
        manager = FundingRateManager()
        manager.initialize()
        
    # T·∫°o scheduler v·ªõi c√°c symbol l·∫•y t·ª´ manager
        test_symbols = manager.symbols[:10]  # Use first 10 symbols
        scheduler = AdvancedFundingRateScheduler(test_symbols)
        
        print(f"Testing integration with {len(test_symbols)} symbols...")
        
    # Ki·ªÉm tra ph√¢n lo·∫°i
        scheduler._categorize_symbols()
        
        print(f"Integration Results:")
        print(f"  Manager symbols loaded: {len(manager.symbols)}")
        print(f"  Scheduler symbols: {len(test_symbols)}")
        print(f"  1h monitoring: {len(scheduler.symbols_1h)}")
        print(f"  4h funding: {len(scheduler.symbols_4h)}")
        print(f"  8h funding: {len(scheduler.symbols_8h)}")
        
    # X√°c minh ph√¢n lo·∫°i ƒë√∫ng (ph·∫ßn l·ªõn s·∫Ω l√† 8h)
        if len(scheduler.symbols_8h) > 0 and len(scheduler.symbols_1h) == len(test_symbols):
            print("‚úÖ Symbol categorization working correctly")
            print(f"  All symbols get 1h monitoring: {len(scheduler.symbols_1h) == len(test_symbols)}")
            print(f"  Most symbols use 8h funding: {len(scheduler.symbols_8h) > len(scheduler.symbols_4h)}")
            return True
        else:
            print("‚ùå Symbol categorization has issues")
            return False
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        return False


def test_telegram_integration():
    """Ki·ªÉm tra t√≠ch h·ª£p Telegram v·ªõi h·ªá th·ªëng m·ªõi"""
    print("\\nKi·ªÉm tra t√≠ch h·ª£p Telegram...")
    print("=" * 60)
    
    try:
        from src.utils.util_tele_bot_check import UtilTeleBotCheck
        
        tele_bot = UtilTeleBotCheck()
        
        if not tele_bot.test_connection():
            print("‚ö†Ô∏è  Telegram not configured, skipping notification tests")
            return True
        
        print("‚úÖ Telegram connection successful")
        
    # Ki·ªÉm tra c√°c ph∆∞∆°ng th·ª©c th√¥ng b√°o m·ªõi
        print("üì§ Testing advanced system notification...")
        result = tele_bot.send_alert(
            "Advanced System Test",
            "Testing the updated funding rate system\\n\\n"
            "‚úÖ Advanced scheduler integrated\\n"
            "‚úÖ Multi-interval support (1h, 4h, 8h)\\n" 
            "‚úÖ Intelligent notifications enabled",
            "SUCCESS"
        )
        
        print(f"   Notification result: {'‚úÖ Success' if result else '‚ùå Failed'}")
        return result
        
    except Exception as e:
        print(f"‚ùå Telegram integration test failed: {e}")
        return False


def main():
    """Ch·∫°y to√†n b·ªô c√°c b√†i ki·ªÉm tra"""
    print("üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra h·ªá th·ªëng Funding Rate ƒë√£ c·∫≠p nh·∫≠t")
    print("=" * 80)
    
    test_results = []
    
    # Test 1: Advanced scheduler standalone
    try:
        result1 = test_advanced_scheduler_standalone()
        test_results.append(("Advanced Scheduler", result1))
    except Exception as e:
        print(f"‚ùå Advanced scheduler test error: {e}")
        test_results.append(("Advanced Scheduler", False))
    
    # Test 2: Updated funding rate manager
    try:
        result2 = test_funding_rate_manager()
        test_results.append(("Updated Manager", result2))
    except Exception as e:
        print(f"‚ùå Manager test error: {e}")
        test_results.append(("Updated Manager", False))
    
    # Test 3: System integration
    try:
        result3 = test_system_integration()
        test_results.append(("System Integration", result3))
    except Exception as e:
        print(f"‚ùå Integration test error: {e}")
        test_results.append(("System Integration", False))
    
    # Test 4: Telegram integration
    try:
        result4 = test_telegram_integration()
        test_results.append(("Telegram Integration", result4))
    except Exception as e:
        print(f"‚ùå Telegram test error: {e}")
        test_results.append(("Telegram Integration", False))
    
    # Summary
    print(f"\\n" + "=" * 80)
    print("üìä COMPLETE SYSTEM TEST SUMMARY")
    print("=" * 80)
    
    passed = 0
    for test_name, result in test_results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name:<25}: {status}")
        if result:
            passed += 1
    
    print(f"\\nOverall: {passed}/{len(test_results)} tests passed")
    
    if passed == len(test_results):
        print("üéâ All tests passed! The updated system is ready.")
        print("\\nüìã Summary of changes:")
        print("  ‚úÖ Replaced old scheduler with advanced multi-interval scheduler")
        print("  ‚úÖ Added 1h monitoring for real-time data")
        print("  ‚úÖ Fixed symbol categorization (now shows correct 8h/4h/1h counts)")
        print("  ‚úÖ Integrated intelligent notifications")
        print("  ‚úÖ Updated system monitoring to show accurate status")
        print("\\nüöÄ System now supports: 1h monitoring + 4h/8h funding cycles")
    else:
        print("üí• Some tests failed. Please check the implementation.")
        sys.exit(1)


if __name__ == "__main__":
    main()